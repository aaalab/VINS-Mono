%YAML:1.0

#common parameters
imu_topic: "/imu"
image_topic: "/downward/image_raw"
output_path: "/home/vradhakrishnan/workspace/output/downwards/"

#camera calibration 
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 640
image_height: 480
# distortion_parameters:
#    k1: -0.019819517173074657
#    k2: 0.035146831632102235
#    p1: -0.024915916782916367
#    p2: 0.0060430884744288585
projection_parameters:
   k2: -0.019819517173074657
   k3: 0.035146831632102235
   k4: -0.024915916782916367
   k5: 0.0060430884744288585
   mu: 278.6362792114673 
   mv: 278.4882512230734 
   u0: 321.0538343921578 
   v0: 246.0915165686215

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 2   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -9.4425611885611271e-03, -9.9930203366732839e-01,
       3.6142544826587603e-02, 9.9994909641086260e-01,
       -9.5648532246810358e-03, -3.2121908239826462e-03,
       3.5556469593661516e-03, 3.6110373732930579e-02,
       9.9934148231901609e-01 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -1.6245072572034319e-02, 2.2797902366608783e-02,
       1.4103442052596971e-03]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 20                 # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.00186          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.000187         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.000433         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.66e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/vradhakrishnan/workspace/output/downwards" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.2      # size of camera marker in RVIZ
